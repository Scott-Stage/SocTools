using System;
using System.Net.WebSockets;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using System.Threading;

static async Task WatchCertStreamAsync(string[] patterns, CancellationToken ct)
{
    using var ws = new ClientWebSocket();
    // Public CT relay
    var uri = new Uri("wss://certstream.calidog.io/");
    await ws.ConnectAsync(uri, ct);

    // build one regex for all patterns (case-insensitive)
    var rx = new Regex(string.Join("|", patterns.Select(Regex.Escape)),
                       RegexOptions.IgnoreCase | RegexOptions.Compiled);

    var buf = new byte[1 << 16];
    while (!ct.IsCancellationRequested && ws.State == WebSocketState.Open)
    {
        var seg = new ArraySegment<byte>(buf);
        var result = await ws.ReceiveAsync(seg, ct);
        if (result.MessageType == WebSocketMessageType.Close) break;

        var json = Encoding.UTF8.GetString(buf, 0, result.Count);
        using var doc = JsonDocument.Parse(json);
        if (!doc.RootElement.TryGetProperty("message_type", out var mt) ||
            mt.GetString() != "certificate_update") continue;

        var names = doc.RootElement
            .GetProperty("data").GetProperty("leaf_cert")
            .GetProperty("all_domains")
            .EnumerateArray().Select(e => e.GetString()!).Distinct(StringComparer.OrdinalIgnoreCase);

        foreach (var d in names)
            if (rx.IsMatch(d))
                Console.WriteLine($"{DateTimeOffset.Now:u}  CT match: {d}");
    }
}

await WatchCertStreamAsync(new[] { "yourbrand", "your-br\u200band", "yorbrand" }, CancellationToken.None);
