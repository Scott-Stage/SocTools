Quick fix: model resources as a list
using System.Text.Json.Serialization;

public class ResponseObject<TItem>
{
    [JsonPropertyName("resources")]
    public List<TItem> Resources { get; set; } = new();
}

public class ResponseItem
{
    [JsonPropertyName("hostname")]
    public string Hostname { get; set; } = "";
}


Deserialize:

var apiResponse =
    JsonSerializer.Deserialize<ResponseObject<ResponseItem>>(result);

// If you need a dictionary keyed by hostname:
var dict = apiResponse?.Resources?
    .ToDictionary(x => x.Hostname, x => x, StringComparer.OrdinalIgnoreCase)
    ?? new Dictionary<string, ResponseItem>(StringComparer.OrdinalIgnoreCase);

If your array items include a key/value pair

If the JSON is like:

"resources": [
  { "key": "srv1", "value": { "hostname": "a" } },
  { "key": "srv2", "value": { "hostname": "b" } }
]


Model it and convert:

public class ResponseObject<TItem>
{
    [JsonPropertyName("resources")]
    public List<ResourceEntry<TItem>> Resources { get; set; } = new();
}
public class ResourceEntry<TItem>
{
    [JsonPropertyName("key")]   public string Key { get; set; } = "";
    [JsonPropertyName("value")] public TItem  Value { get; set; } = default!;
}

// then
var dict = apiResponse.Resources.ToDictionary(e => e.Key, e => e.Value);