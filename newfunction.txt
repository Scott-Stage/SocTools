// Services/ComponentTaskRunner.cs
// No change to registration in Program.cs
public class ComponentTaskRunner : IDisposable
{
    private CancellationTokenSource? _cts;

    // THE KEY CHANGE IS HERE: `params Func<Task>[] workFunctions`
    // The `params` array must be the last argument.
    public void Start(TimeSpan interval, Action onStateHasChanged, params Func<Task>[] workFunctions)
    {
        if (workFunctions == null || workFunctions.Length == 0)
        {
            // Do nothing if no work was provided.
            return;
        }

        _cts = new CancellationTokenSource();
        _ = DoContinuousWorkAsync(interval, onStateHasChanged, workFunctions, _cts.Token);
    }

    private async Task DoContinuousWorkAsync(TimeSpan interval, Action onStateHasChanged, Func<Task>[] workFunctions, CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            try
            {
                // 1. Loop through each work function and execute it in sequence.
                foreach (var work in workFunctions)
                {
                    if (token.IsCancellationRequested) break;
                    await work();
                }

                // 2. After all work is done, execute the single UI update callback.
                if (!token.IsCancellationRequested)
                {
                    onStateHasChanged?.Invoke();
                }

                // 3. Wait for the next interval.
                await Task.Delay(interval, token);
            }
            catch (OperationCanceledException)
            {
                break;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in component background task: {ex.Message}");
            }
        }
    }

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }
}