2. Access the Path Using IConfiguration
Since you are not using AddDbContext, you will need to manually retrieve this connection string in the part of your code where you manage your database connection. You can do this by using dependency injection to get an instance of the IConfiguration service.
Let's say you have a custom data access service (e.g., DatabaseService.cs) that handles your database operations. You can inject IConfiguration into its constructor.
Example of a Data Access Service:
code
C#
// Import the necessary configuration namespace
using Microsoft.Extensions.Configuration;
using Microsoft.Data.Sqlite; // Assuming you are using Microsoft.Data.Sqlite

public class DatabaseService
{
    private readonly IConfiguration _configuration;
    private readonly string _connectionString;

    // Inject IConfiguration into the constructor
    public DatabaseService(IConfiguration configuration)
    {
        _configuration = configuration;
        // Retrieve the connection string from appsettings.json
        _connectionString = _configuration.GetConnectionString("DefaultConnection");
    }

    // Method to open a new database connection
    public SqliteConnection GetConnection()
    {
        return new SqliteConnection(_connectionString);
    }

    // You can now use this service to perform database queries
    public void YourDatabaseMethod()
    {
        using (var connection = GetConnection())
        {
            connection.Open();
            // ... perform your database operations here
        }
    }
}
3. Register Your Service
Finally, you need to register your custom DatabaseService with the dependency injection container in your Program.cs file. This makes it available to be injected into your Blazor pages or other services.
Example Program.cs:
code
C#
var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

// Register your custom DatabaseService as a singleton or scoped service
// Scoped is often a good choice for data services.
builder.Services.AddScoped<DatabaseService>(); 

var app = builder.Build();

// ... rest of the Program.cs file```

Now, you can inject `DatabaseService` directly into any Blazor component and use it to access your database, all while keeping your connection string securely managed in `appsettings.json`.

**Example Blazor Component (`.razor` file):**

```csharp
@page "/data"
@inject DatabaseService DbService

<h3>Database Interaction</h3>

@code {
    protected override void OnInitialized()
    {
        // You can now call methods from your service
        DbService.YourDatabaseMethod();
    }
}