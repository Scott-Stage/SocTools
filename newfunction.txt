function parseUrlsAndDisplayTable(html) {
  // 1. Parse the HTML string into a DOM tree
  const parser = new DOMParser();
  const doc = parser.parseFromString(html, 'text/html');

  // 2. Find all anchor elements (<a> tags)
  const links = doc.querySelectorAll('a');

  // 3. Prepare data array to store link information
  const linkData = [];

  // 4. Iterate through each link and extract text and URL, then process URL
  links.forEach(link => {
    const linkText = link.textContent.trim(); // Get link text and trim whitespace
    let url = link.getAttribute('href');    // Get the href attribute (URL)

    if (url) { // Ensure there's a URL (href attribute exists)
      // Check if it's a Safe Links URL
      if (url.startsWith('https://gcc02.safelinks.protection.outlook.com/') ||
          url.startsWith('https://na01.safelinks.protection.outlook.com/') ||
          url.startsWith('https://emea01.safelinks.protection.outlook.com/') ||
          url.startsWith('https://ap01.safelinks.protection.outlook.com/') || // Add more variations if needed
          url.startsWith('https://safelinks.protection.outlook.com/')) { // Generic safelinks domain

        try {
          // Extract the 'url' parameter and URL-decode it
          const urlParams = new URLSearchParams(new URL(url).search);
          const decodedURL = urlParams.get('url');

          if (decodedURL) {
            url = decodeURIComponent(decodedURL); // Decode the URL-encoded original URL
          }
        } catch (error) {
          console.error("Error processing Safe Links URL:", error, url);
          // If there's an error parsing the Safe Links URL, fallback to using the original URL
          // or handle it as needed for your application.
          // For now, we'll use the original URL as fallback if parsing fails.
        }
      } else {
        try {
          url = decodeURIComponent(url); // Decode regular URL encoding if it's not a Safe Links URL
        } catch (error) {
          console.error("Error decoding URL:", error, url);
          // Handle decoding errors for regular URLs if needed.
        }
      }


      linkData.push({
        text: linkText || 'No Text', // Use 'No Text' if link text is empty
        url: url
      });
    }
  });

  // 5. Create the table element
  const table = document.createElement('table');
  table.classList.add('url-table'); // Add a class for styling if needed

  // 6. Create table header row
  const thead = document.createElement('thead');
  const headerRow = document.createElement('tr');

  const headerText = document.createElement('th');
  headerText.textContent = 'Link Text';
  headerRow.appendChild(headerText);

  const headerURL = document.createElement('th');
  headerURL.textContent = 'URL';
  headerRow.appendChild(headerURL);

  const headerCopy = document.createElement('th');
  headerCopy.textContent = 'Copy to clipboard';
  headerRow.appendChild(headerCopy);

  thead.appendChild(headerRow);
  table.appendChild(thead);

  // 7. Create table body and rows for each link
  const tbody = document.createElement('tbody');

  linkData.forEach((link, index) => {
    const row = document.createElement('tr');

    // Link Text Cell
    const textCell = document.createElement('td');
    textCell.textContent = link.text;
    row.appendChild(textCell);

    // URL Cell
    const urlCell = document.createElement('td');
    const urlLink = document.createElement('a');
    urlLink.href = link.url;
    urlLink.textContent = link.url;
    urlLink.target = "_blank"; // Open links in a new tab
    urlCell.appendChild(urlLink);
    row.appendChild(urlCell);

    // Copy Button Cell
    const copyCell = document.createElement('td');
    const copyButton = document.createElement('button');
    copyButton.textContent = 'Copy';
    copyButton.addEventListener('click', () => {
      copyToClipboard(link.url, copyButton); // Call copy function
    });
    copyCell.appendChild(copyButton);
    row.appendChild(copyCell);

    tbody.appendChild(row);
  });

  table.appendChild(tbody);

  return table; // Return the generated table element
}