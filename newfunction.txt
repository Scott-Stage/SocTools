function ConvertTo-JsonFromXmlSTJ($XMLData)
{
    $xmldoc = [System.Xml.XmlDocument]::new()
    $xmldoc.LoadXml((Remove-UnknownCharactersFromXML -String $XMLData))

    # Convert XML to a Hashtable (or PSCustomObject for more complex scenarios)
    $jsonObject = ConvertFrom-XmlToHashtable -XmlNode $xmldoc

    # Serialize the Hashtable to JSON using System.Text.Json
    $jsonString = [System.Text.Json.JsonSerializer]::Serialize($jsonObject, [System.Text.Json.JsonSerializerOptions]::new() {WriteIndented = $true})

    # Remove the "@" character from attributes (similar to the original function)
    return ([Regex]::Replace($jsonString, '"@', '"', [System.Text.RegularExpressions.RegexOptions]::IgnoreCase))

}

function ConvertFrom-XmlToHashtable {
    param(
        [Parameter(Mandatory=$true)]
        [System.Xml.XmlNode]$XmlNode
    )

    if ($XmlNode.HasChildNodes -and ($XmlNode.ChildNodes.Count -gt 1 -or ($XmlNode.ChildNodes[0].NodeType -ne "Text" -and $XmlNode.ChildNodes[0].NodeType -ne "CDATA"))) {
        $jsonObject = @{}

        # Process Attributes
        if ($XmlNode.Attributes) {
            foreach ($attribute in $XmlNode.Attributes) {
                $jsonObject."@$($attribute.Name)" = $attribute.Value
            }
        }

        # Process Child Nodes
        foreach ($childNode in $XmlNode.ChildNodes) {
            if ($childNode.NodeType -eq "Element") {
                $childName = $childNode.Name
                $childValue = ConvertFrom-XmlToHashtable -XmlNode $childNode

                if ($jsonObject.ContainsKey($childName)) {
                    # Handle multiple elements with the same name as an array
                    if ($jsonObject.$childName -isnot [System.Array]) {
                        $jsonObject.$childName = @($jsonObject.$childName)
                    }
                    $jsonObject.$childName += $childValue
                } else {
                    $jsonObject.$childName = $childValue
                }
            } elseif ($childNode.NodeType -eq "Text" -or $childNode.NodeType -eq "CDATA") {
                # If it's just text content and the parent has no attributes and only one text child, return just the text.
                if (!$XmlNode.Attributes -and $XmlNode.ChildNodes.Count -eq 1) {
                    return $childNode.InnerText.Trim()
                } else { # Otherwise, treat it as #text node (similar to Newtonsoft in some scenarios, though STJ is more flexible)
                    if ($jsonObject.ContainsKey("#text")) {
                        if ($jsonObject."#text" -isnot [System.Array]) {
                            $jsonObject."#text" = @($jsonObject."#text")
                        }
                        $jsonObject."#text" += $childNode.InnerText.Trim()
                    } else {
                        $jsonObject."#text" = $childNode.InnerText.Trim()
                    }
                }
            }
        }
        return $jsonObject
    } elseif ($XmlNode.NodeType -eq "Element" -and !$XmlNode.HasChildNodes -and $XmlNode.Attributes) {
        # Element with only attributes and no child nodes
        $jsonObject = @{}
        foreach ($attribute in $XmlNode.Attributes) {
            $jsonObject."@$($attribute.Name)" = $attribute.Value
        }
        return $jsonObject

    }
    else {
        # Text node or empty element
        return $XmlNode.InnerText.Trim()
    }
}


# Example Usage (assuming you have Remove-UnknownCharactersFromXML defined or can remove the call for testing):
# Function to remove unknown characters (you might have your own implementation, this is a basic example)
function Remove-UnknownCharactersFromXML {
    param(
        [Parameter(Mandatory=$true)]
        [string]$String
    )
    return $String # In a real scenario, you'd implement character removal logic here.
}