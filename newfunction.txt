sealed class NoProxy : IWebProxy
{
    public ICredentials? Credentials { get; set; }
    public Uri GetProxy(Uri d) => d;
    public bool IsBypassed(Uri h) => true;
}

public static async Task WatchCertStreamAsync(
    string host, int port, string origin, string[] patterns, CancellationToken ct)
{
    // Build ws://host:port/full-stream/  (note trailing slash)
    var uri = new UriBuilder("ws", host, port, "/full-stream/").Uri;

    using var ws = new ClientWebSocket();
    ws.Options.Proxy = new NoProxy();                         // avoid “no such host is known …:8080”
    ws.Options.KeepAliveInterval = TimeSpan.FromSeconds(30);
    ws.Options.SetRequestHeader("Origin", origin);            // e.g., "http://170.9.26.247:8080"

    await ws.ConnectAsync(uri, ct);

    var rx = new Regex(string.Join("|", patterns.Select(Regex.Escape)),
                       RegexOptions.IgnoreCase | RegexOptions.Compiled);

    var buffer = new byte[64 * 1024];

    while (!ct.IsCancellationRequested && ws.State == WebSocketState.Open)
    {
        using var ms = new MemoryStream();
        WebSocketReceiveResult result;
        do
        {
            result = await ws.ReceiveAsync(buffer, ct);
            if (result.MessageType == WebSocketMessageType.Close)
            {
                await ws.CloseAsync(WebSocketCloseStatus.NormalClosure, "bye", ct);
                return;
            }
            if (result.MessageType != WebSocketMessageType.Text) break;
            ms.Write(buffer, 0, result.Count);
        }
        while (!result.EndOfMessage);

        if (result.MessageType != WebSocketMessageType.Text) continue;

        ms.Position = 0;
        JsonDocument doc;
        try { doc = await JsonDocument.ParseAsync(ms, cancellationToken: ct); }
        catch (JsonException) { continue; }

        using (doc)
        {
            var root = doc.RootElement;
            if (!root.TryGetProperty("message_type", out var mtEl)) continue;
            var mt = mtEl.GetString();
            if (mt is "heartbeat" or not "certificate_update") continue;

            if (!root.TryGetProperty("data", out var data) ||
                !data.TryGetProperty("leaf_cert", out var cert) ||
                !cert.TryGetProperty("all_domains", out var arr) ||
                arr.ValueKind != JsonValueKind.Array) continue;

            var names = arr.EnumerateArray()
                           .Select(e => e.GetString())
                           .Where(s => !string.IsNullOrWhiteSpace(s))!
                           .Distinct(StringComparer.OrdinalIgnoreCase);

            foreach (var d in names)
                if (rx.IsMatch(d))
                    Console.WriteLine($"{DateTimeOffset.Now:u}  CT match: {d}");
        }
    }
}
Call it like this:

csharp
Copy
Edit
await WatchCertStreamAsync(
    host: "170.9.26.247",
    port: 8080,
    origin: "http://170.9.26.247:8080",   // match the endpoint you’re hitting
    patterns: new[] { "yourbrand", "y0urbrand" },
    ct: CancellationToken.None);