function findAllObjectsWithValueInReport(obj, targetValue) {
  const results = [];
  const lowerTargetValue = targetValue.toLowerCase(); // Convert targetValue to lowercase once for efficiency

  // Function to search within the "report" node
  function searchInReport(reportObj) {
    for (const key in reportObj) {
      if (reportObj.hasOwnProperty(key)) {
        const value = reportObj[key];

        // console.log(`Checking key: ${key}, value:`, value); // Debugging: See what's being processed

        if (typeof value === 'string') {
          // console.log(`String value found: ${value}`); // Debugging: Confirm string values are found
          const parts = value.split(/[\s\n]+/); // Split by spaces and newlines

          for (const part of parts) {
            const lowerPart = part.toLowerCase(); // Convert part to lowercase for case-insensitive comparison
            // console.log(`  Checking part: ${part}, lowercase part: ${lowerPart}`); // Debugging: See parts and their lowercase versions
            if (lowerPart === lowerTargetValue) {
              // console.log(`    Match found for part: ${part}, targetValue: ${targetValue}`); // Debugging: Confirm match
              results.push(reportObj);
              return; // Stop searching in this string once a match is found (optimization, can remove if needed to find all matches within a string)
            }
          }
        } else if (typeof value === 'object' && value !== null) {
          searchInReport(value); // Recursive call for nested objects
        }
      }
    }
  }

  //Iterates over root
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
         if(key === 'report' && typeof obj[key] === 'object' && obj[key] !== null){
            searchInReport(obj[key]); // Search within the 'report' node
         }
      }
    }

  return results; // Return the array of matching objects
}