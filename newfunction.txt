AppState.cs (Create this file anywhere, e.g., in a State folder)

namespace YourProjectName.State
{
    public class AppState
    {
        // The shared value
        public double WarningThreshold { get; private set; } = 0.10; // Default value

        // An event that components will subscribe to
        public event Action? OnChange;

        // A method to change the state and notify subscribers
        public void SetWarningThreshold(double threshold)
        {
            if (threshold > 0 && threshold < 1)
            {
                WarningThreshold = threshold;
                NotifyStateChanged();
            }
        }

        private void NotifyStateChanged() => OnChange?.Invoke();
    }
}





Program.cs

using YourProjectName.State; // Add this using directive

// ... other using directives

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

// Register the AppState as a singleton
builder.Services.AddSingleton<AppState>(); 

// ... rest of the file




DriveCapacityBar.razor

@inject AppState AppState
@implements IDisposable
@* --- rest of the component is the same --- *@
...
@code {
    [Parameter]
    public double TotalCapacityGB { get; set; }

    [Parameter]
    public double FreeSpaceGB { get; set; }
    
    private double UsedSpaceGB => TotalCapacityGB - FreeSpaceGB;
    private double UsedPercentage => (TotalCapacityGB > 0) ? (UsedSpaceGB / TotalCapacityGB * 100) : 0;

    // Use the value directly from the injected AppState service
    private bool IsLowOnSpace => (TotalCapacityGB > 0) && ((FreeSpaceGB / TotalCapacityGB) < AppState.WarningThreshold);

    protected override void OnInitialized()
    {
        // Subscribe to the OnChange event
        AppState.OnChange += StateHasChanged;
    }

    // Unsubscribe from the event when the component is destroyed to prevent memory leaks
    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}