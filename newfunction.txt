Step 1: Create a Service and Interface
Generated csharp
// ISessionStateService.cs
public interface ISessionStateService
{
    Task<string> GetStateAsync(string key);
    Task SetStateAsync(string key, string value);
}

// SessionStateService.cs
public class SessionStateService : ISessionStateService
{
    private readonly IJSRuntime _jsRuntime;

    public SessionStateService(IJSRuntime jsRuntime)
    {
        _jsRuntime = jsRuntime;
    }

    public async Task<string> GetStateAsync(string key)
    {
        // Assumes you created the JS file from Method 1
        return await _jsRuntime.InvokeAsync<string>("getSessionStorage", key);
    }

    public async Task SetStateAsync(string key, string value)
    {
        await _jsRuntime.InvokeVoidAsync("setSessionStorage", key, value);
    }
}
Use code with caution.
C#
Step 2: Register the Service
In Program.cs, register your new service for dependency injection.
Generated csharp
// Program.cs
...
builder.Services.AddScoped<ISessionStateService, SessionStateService>();
...
Use code with caution.
C#
Step 3: Use the Service in Your Component
Now your component code becomes much cleaner and doesn't directly depend on IJSRuntime.
Generated razor
@* Shared/MainLayout.razor (Refactored to use the service) *@
@inherits LayoutComponentBase
@inject ISessionStateService SessionState

@* ... (The HTML part is exactly the same) ... *@
@if (showWelcomeNotice) { ... }

@code {
    private bool showWelcomeNotice = false;
    private const string visitedFlagKey = "hasVisitedSite";

    protected override async Task OnInitializedAsync()
    {
        // We can use OnInitializedAsync here as we don't need to wait for rendering
        var hasVisited = await SessionState.GetStateAsync(visitedFlagKey);

        if (string.IsNullOrEmpty(hasVisited))
        {
            showWelcomeNotice = true;
            // No need for StateHasChanged() in OnInitializedAsync
            
            await SessionState.SetStateAsync(visitedFlagKey, "true");
        }
    }

    private void DismissNotice()
    {
        showWelcomeNotice = false;
    }
}