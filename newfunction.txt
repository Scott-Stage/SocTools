def balance_item_groups_robust(list_of_groups):
    """
    Balances the number of items across a list of lists (groups) in-place.
    This version safely handles groups that might be None or other non-list types.

    Args:
        list_of_groups: A list containing other lists that will be modified.
    """
    # Filter out any groups that are None or not valid lists before processing
    valid_groups = [g for g in list_of_groups if isinstance(g, list)]
    if not valid_groups:
        print("No valid groups to balance.")
        return

    # Step 1: Pool all items from valid groups into a single list.
    # The 'if group' check skips both empty lists and None values gracefully.
    all_items = [item for group in valid_groups if group for item in group]
    
    # Step 2: Calculate target sizes based on valid groups
    num_groups = len(valid_groups)
    total_items = len(all_items)
    
    if total_items == 0:
        # Clear all valid groups if there are no items to distribute
        for group in valid_groups:
            group.clear()
        return

    base_size = total_items // num_groups
    remainder = total_items % num_groups
    
    print(f"Total items: {total_items}, Valid groups: {num_groups}")
    print(f"Base size per group: {base_size}, with {remainder} groups getting one extra item.")
    print("-" * 20)

    # Step 3: Clear and redistribute into the original valid lists
    current_position = 0
    for i, group in enumerate(valid_groups):
        num_to_assign = base_size + 1 if i < remainder else base_size
        
        new_content = all_items[current_position : current_position + num_to_assign]
        
        # Modify the original list in-place
        group.clear()
        group.extend(new_content)
        
        current_position += num_to_assign