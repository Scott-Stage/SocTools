function findAllObjectsWithValueInReport(obj, targetValue) {
  const results = [];
  const targetTerms = targetValue.toLowerCase().split(/[\s\n]+/); // Split targetValue into terms and lowercase them

  // Function to search within the "report" node
  function searchInReport(reportObj) {
    for (const key in reportObj) {
      if (reportObj.hasOwnProperty(key)) {
        const value = reportObj[key];

        if (typeof value === 'string') {
          const reportParts = value.toLowerCase().split(/[\s\n]+/); // Split report string values and lowercase them
          let allTermsFound = true; // Assume all target terms are found initially

          for (const targetTerm of targetTerms) {
            let termFoundInReport = false;
            for (const reportPart of reportParts) {
              if (reportPart === targetTerm) {
                termFoundInReport = true;
                break; // Found the current targetTerm in the report string, move to next targetTerm
              }
            }
            if (!termFoundInReport) {
              allTermsFound = false; // If any targetTerm is NOT found, set flag to false
              break; // No need to check further targetTerms for this report string
            }
          }

          if (allTermsFound) {
            results.push(reportObj); // Only add the object if ALL targetTerms were found
            return; // Optimization: Stop searching in this string once all terms are confirmed
          }

        } else if (typeof value === 'object' && value !== null) {
          searchInReport(value); // Recursive call for nested objects
        }
      }
    }
  }

  //Iterates over root
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
         if(key === 'report' && typeof obj[key] === 'object' && obj[key] !== null){
            searchInReport(obj[key]); // Search
         }
      }
    }

  return results; // Return the array of matching objects
}