// AppState.cs - DO NOT DO THIS
public class AppState
{
    private readonly ISnackbar _snackbar;

    // This constructor will cause a startup crash because a Singleton
    // cannot depend on a Scoped service like ISnackbar.
    public AppState(ISnackbar snackbar)
    {
        _snackbar = snackbar;
    }
}```

### The Correct Solution: Using `IServiceProvider`

To solve this, you inject the main `IServiceProvider` into your `AppState`. This provider acts as a service locator. When you need to show a snackbar, you can use it to create a temporary "scope" and safely request the `ISnackbar` service from that temporary scope.

Here is the correct, step-by-step implementation.

#### Step 1: Modify `AppState.cs` to use `IServiceProvider`

Change your `AppState` constructor to accept `IServiceProvider` and use it to create a scope whenever you need to show a snackbar.

```csharp
// AppState.cs - The Correct Implementation
using Microsoft.Extensions.DependencyInjection;
using MudBlazor;
using System;

namespace WebApp.State
{
    public class AppState
    {
        private readonly IServiceProvider _serviceProvider;

        // Inject the main service provider. This is safe for a Singleton.
        public AppState(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        // Example property that will trigger a notification
        private string? _importantData;
        public string? ImportantData
        {
            get => _importantData;
            set
            {
                _importantData = value;
                // When the data changes, show a success snackbar
                ShowSnackbarMessage($"Data was updated to: {value}", Severity.Success);
                NotifyStateChanged();
            }
        }

        public event Action? OnChange;
        private void NotifyStateChanged() => OnChange?.Invoke();


        // This is our helper method to safely show a snackbar
        private void ShowSnackbarMessage(string message, Severity severity)
        {
            // Create a new, temporary scope from the service provider.
            // This scope can safely provide Scoped services like ISnackbar.
            using var scope = _serviceProvider.CreateScope();

            // Resolve the ISnackbar service from the new scope
            var snackbar = scope.ServiceProvider.GetRequiredService<ISnackbar>();

            // Now use the snackbar service. It's safe.
            snackbar.Add(message, severity);
        }
    }
}