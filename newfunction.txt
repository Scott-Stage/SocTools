import os
import re
import string

def read_software_list(filepath):
    """Reads a software list from a file, one item per line."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            software_list = [line.strip() for line in f if line.strip()]
        return software_list
    except FileNotFoundError:
        print(f"Error: File not found at {filepath}")
        return None
    except Exception as e:
        print(f"Error reading file {filepath}: {e}")
        return None

def normalize_name(name):
    """
    Normalizes software name: lowercase, strip whitespace, remove punctuation,
    remove duplicate words, and rejoin sorted unique words.
    """
    if not name:
        return ""
    translator = str.maketrans('', '', string.punctuation)
    name = name.translate(translator)
    name = name.lower().strip()
    name = re.sub(r'\s+', ' ', name)
    tokens = name.split()
    unique_sorted_tokens = sorted(list(set(filter(None, tokens))))
    if not unique_sorted_tokens:
        return ""
    return ' '.join(unique_sorted_tokens)

def compare_lists(my_software_list, db_software_list):
    """
    Compares lists with specific Full and Partial match criteria.
    - Full Match: Symmetric Difference <= 1 token.
    - Partial Match: Proper subset relationship AND subset size >= 2 tokens.

    Returns a dictionary with 'full_matches', 'partial_matches', 'not_found'.
    """
    if my_software_list is None or db_software_list is None:
        return None

    # --- Prepare Database Data ---
    db_normalized_map = {} # Maps normalized string -> list of original DB entries
    db_token_sets = {}     # Maps normalized string -> set of unique tokens
    for db_item in db_software_list:
        normalized = normalize_name(db_item)
        if normalized:
            if normalized not in db_normalized_map:
                db_normalized_map[normalized] = []
                db_token_sets[normalized] = set(filter(None, normalized.split()))
            db_normalized_map[normalized].append(db_item)

    # --- Initialize Results ---
    results = {
        'full_matches': [],         # List of original 'my_sw' items
        'partial_matches': {},      # Dict: {orig 'my_sw': [orig 'db_sw' matches]}
        'not_found': []             # List of original 'my_sw' items
    }

    processed_my_software_originals = set() # Track original names from my list

    # --- Compare Each Item in My List ---
    for my_sw_orig in my_software_list:
        if my_sw_orig in processed_my_software_originals:
            continue

        my_sw_norm = normalize_name(my_sw_orig)

        if not my_sw_norm:
            results['not_found'].append(my_sw_orig)
            processed_my_software_originals.add(my_sw_orig)
            continue

        my_sw_tokens = set(filter(None, my_sw_norm.split()))
        if not my_sw_tokens:
            results['not_found'].append(my_sw_orig)
            processed_my_software_originals.add(my_sw_orig)
            continue

        # --- Check Against Database Entries ---
        current_match_level = 'none' # none, partial, full
        partial_match_candidates = [] # Store original DB names for potential partial matches

        for db_norm, db_tokens in db_token_sets.items():
            if not db_tokens:
                continue

            # Calculate symmetric difference
            symmetric_difference = my_sw_tokens.symmetric_difference(db_tokens)

            # --- Check for Full Match ---
            if len(symmetric_difference) <= 1:
                current_match_level = 'full'
                # Found the highest priority match for this my_sw, no need to check further
                break # Exit the inner db_token_sets loop

            # --- Check for Partial Match (only if not already a full match) ---
            # Note: symmetric_difference > 1 implicitly if we reach here

            is_proper_subset_my_in_db = my_sw_tokens.issubset(db_tokens) and my_sw_tokens != db_tokens
            is_proper_subset_db_in_my = db_tokens.issubset(my_sw_tokens) and my_sw_tokens != db_tokens

            partial_match_criteria_met = False
            if is_proper_subset_my_in_db and len(my_sw_tokens) >= 2:
                 partial_match_criteria_met = True
            elif is_proper_subset_db_in_my and len(db_tokens) >= 2:
                 partial_match_criteria_met = True

            if partial_match_criteria_met:
                 # If we find a partial match, record it and potentially upgrade status
                 if current_match_level != 'full': # Don't downgrade from full
                     current_match_level = 'partial'
                     partial_match_candidates.extend(db_normalized_map[db_norm])
                 # Continue checking other DB entries in case a Full Match exists


        # --- Categorize Result for my_sw_orig ---
        if current_match_level == 'full':
            results['full_matches'].append(my_sw_orig)
        elif current_match_level == 'partial':
            # Store unique original DB names that caused partial match
            results['partial_matches'][my_sw_orig] = sorted(list(set(partial_match_candidates)))
        else: # current_match_level == 'none'
            results['not_found'].append(my_sw_orig)

        processed_my_software_originals.add(my_sw_orig)

    return results

def write_results(output_file, results):
    """Writes the categorized results to a file."""
    if results is None:
        print("Skipping writing results due to previous errors.")
        return

    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("=" * 40 + "\n")
            f.write("Software Comparison Results\n")
            f.write("=" * 40 + "\n\n")

            f.write("=== Full Matches Found in Database ===\n")
            f.write("    (Unique token sets differ by 0 or 1 token)\n")
            if results['full_matches']:
                for item in sorted(results['full_matches']):
                    f.write(f"- {item}\n")
            else:
                f.write("None\n")
            f.write("\n")

            f.write("=== Partial Matches Found in Database ===\n")
            f.write("    (One name is proper subset of other & subset size >= 2 tokens; Not a Full Match)\n")
            if results['partial_matches']:
                for my_sw, db_matches in sorted(results['partial_matches'].items()):
                    f.write(f"- Your Software: {my_sw}\n")
                    f.write(f"  Potential DB Matches: {', '.join(db_matches)}\n")
            else:
                f.write("None\n")
            f.write("\n")

            f.write("=== Software NOT Found in Database ===\n")
            f.write("    (No DB entry met Full or Partial match criteria)\n")
            if results['not_found']:
                for item in sorted(results['not_found']):
                    f.write(f"- {item}\n")
            else:
                f.write("None\n")
            f.write("\n")

        print(f"Results successfully written to {output_file}")

    except Exception as e:
        print(f"Error writing results to file {output_file}: {e}")

# --- Main Execution ---
if __name__ == "__main__":
    my_software_file = "my_software.txt"
    db_software_file = "database_software.txt"
    output_result_file = "comparison_results.txt"

    print(f"Reading your software list from: {my_software_file}")
    my_list = read_software_list(my_software_file)

    print(f"Reading database software list from: {db_software_file}")
    db_list = read_software_list(db_software_file)

    if my_list is not None and db_list is not None:
        print("Comparing lists using specific Full/Partial match criteria...")
        comparison_results = compare_lists(my_list, db_list)
        write_results(output_result_file, comparison_results)
    else:
        print("Comparison cancelled due to errors reading input files.")