1) Fixed-palette + stable hash (recommended)
csharp
Copy
using System.Security.Cryptography;
using System.Text;

public static class AvatarColor
{
    // Fluent/Office-aligned swatches (names optional)
    public static readonly (string Name, string Hex)[] Palette =
    {
        ("CommunicationBlue", "#0078D4"),
        ("CyanBlue10",        "#106EBE"),
        ("RoyalBlue",         "#3949AB"),
        ("Indigo",            "#5C2D91"),
        ("Purple",            "#8E44AD"),
        ("Magenta",           "#B4009E"),
        ("HotPink",           "#E3008C"),
        ("Coral",             "#F7630C"),
        ("Pumpkin",           "#CA5010"),
        ("Rust",              "#8E562E"),
        ("Gold",              "#FFB900"),
        ("Lime",              "#6BB700"),
        ("Green",             "#107C10"),
        ("Teal",              "#038387"),
        ("Cyan",              "#00B7C3"),
        ("Steel",             "#7A7574"),
        ("Platinum",          "#605E5C"),
        ("CoolGray",          "#8A8886")
    };

    public static (string name, string hex, string textHex) PickForUser(string userName)
    {
        if (string.IsNullOrWhiteSpace(userName))
            return ("Default", "#7A7574", "#FFFFFF"); // steel + white

        int idx = StableIndex(userName, Palette.Length);
        string hex = Palette[idx].Hex;
        string text = IdealTextOn(hex);
        return (Palette[idx].Name, hex, text);
    }

    // Stable index from SHA256 hash (works across processes/platforms)
    private static int StableIndex(string input, int mod)
    {
        using var sha = SHA256.Create();
        var bytes = sha.ComputeHash(Encoding.UTF8.GetBytes(input));
        // use first 4 bytes as unsigned int
        uint value = (uint)(bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24));
        return (int)(value % (uint)mod);
    }

    // Return #FFFFFF or #1F1F1F based on WCAG-ish contrast
    public static string IdealTextOn(string bgHex)
    {
        (double r, double g, double b) = HexToLinearRgb(bgHex);
        double L = 0.2126*r + 0.7152*g + 0.0722*b; // relative luminance
        // Contrast vs white(1.0) and near-black(~0.015)
        double contrastWhite = (1.0 + 0.05) / (L + 0.05);
        double contrastBlack = (L + 0.05) / (0.0 + 0.05);
        return contrastWhite >= contrastBlack ? "#FFFFFF" : "#1F1F1F";
    }

    private static (double r, double g, double b) HexToLinearRgb(string hex)
    {
        if (hex.StartsWith("#")) hex = hex[1..];
        byte r8 = Convert.ToByte(hex.Substring(0, 2), 16);
        byte g8 = Convert.ToByte(hex.Substring(2, 2), 16);
        byte b8 = Convert.ToByte(hex.Substring(4, 2), 16);
        return (SrgbToLinear(r8/255.0), SrgbToLinear(g8/255.0), SrgbToLinear(b8/255.0));
    }

    private static double SrgbToLinear(double c)
        => c <= 0.04045 ? c/12.92 : Math.Pow((c+0.055)/1.055, 2.4);
}
Use in MudBlazor (example with MudAvatar)
r
Copy
@code {
    string initials => GetInitials(UserDisplayName);
    string bg => AvatarColor.PickForUser(UserDisplayName).hex;
    string fg => AvatarColor.PickForUser(UserDisplayName).textHex;
}
<MudAvatar Style="background:@bg;color:@fg">@initials</MudAvatar>