function parseUrlsAndDisplayTable(html) {
  // 1. Parse the HTML string into a DOM tree
  const parser = new DOMParser();
  const doc = parser.parseFromString(html, 'text/html');

  // 2. Find all anchor elements (<a> tags)
  const links = doc.querySelectorAll('a');

  // 3. Prepare data array to store link information
  const linkData = [];

  // 4. Iterate through each link and extract text and URL
  links.forEach(link => {
    const linkText = link.textContent.trim(); // Get link text and trim whitespace
    const url = link.getAttribute('href');    // Get the href attribute (URL)

    if (url) { // Ensure there's a URL (href attribute exists)
      linkData.push({
        text: linkText || 'No Text', // Use 'No Text' if link text is empty
        url: url
      });
    }
  });

  // 5. Create the table element
  const table = document.createElement('table');
  table.classList.add('url-table'); // Add a class for styling if needed

  // 6. Create table header row
  const thead = document.createElement('thead');
  const headerRow = document.createElement('tr');

  const headerText = document.createElement('th');
  headerText.textContent = 'Link Text';
  headerRow.appendChild(headerText);

  const headerURL = document.createElement('th');
  headerURL.textContent = 'URL';
  headerRow.appendChild(headerURL);

  const headerCopy = document.createElement('th');
  headerCopy.textContent = 'Copy to clipboard';
  headerRow.appendChild(headerCopy);

  thead.appendChild(headerRow);
  table.appendChild(thead);

  // 7. Create table body and rows for each link
  const tbody = document.createElement('tbody');

  linkData.forEach((link, index) => {
    const row = document.createElement('tr');

    // Link Text Cell
    const textCell = document.createElement('td');
    textCell.textContent = link.text;
    row.appendChild(textCell);

    // URL Cell
    const urlCell = document.createElement('td');
    const urlLink = document.createElement('a');
    urlLink.href = link.url;
    urlLink.textContent = link.url;
    urlLink.target = "_blank"; // Open links in a new tab
    urlCell.appendChild(urlLink);
    row.appendChild(urlCell);

    // Copy Button Cell
    const copyCell = document.createElement('td');
    const copyButton = document.createElement('button');
    copyButton.textContent = 'Copy';
    copyButton.addEventListener('click', () => {
      copyToClipboard(link.url, copyButton); // Call copy function
    });
    copyCell.appendChild(copyButton);
    row.appendChild(copyCell);

    tbody.appendChild(row);
  });

  table.appendChild(tbody);

  return table; // Return the generated table element
}

// Helper function to copy text to clipboard
function copyToClipboard(text, button) {
  if (navigator.clipboard) {
    navigator.clipboard.writeText(text)
      .then(() => {
        button.textContent = 'Copied!';
        setTimeout(() => {
          button.textContent = 'Copy'; // Reset button text after a short delay
        }, 1500); // Reset after 1.5 seconds
      })
      .catch(err => {
        console.error('Failed to copy text: ', err);
        alert('Failed to copy URL to clipboard. Please copy manually.');
      });
  } else {
    // Fallback for browsers that don't support Clipboard API (older browsers)
    fallbackCopyToClipboard(text, button);
  }
}

// Fallback copy to clipboard for older browsers
function fallbackCopyToClipboard(text, button) {
  const textArea = document.createElement("textarea");
  textArea.value = text;

  // Avoid scrolling to bottom
  textArea.style.top = "0";
  textArea.style.left = "0";
  textArea.style.position = "fixed";

  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();

  try {
    const successful = document.execCommand('copy');
    if (successful) {
      button.textContent = 'Copied!';
      setTimeout(() => {
        button.textContent = 'Copy';
      }, 1500);
    } else {
      alert('Failed to copy URL to clipboard. Please copy manually (Ctrl+C / Cmd+C).');
    }
  } catch (err) {
    console.error('Fallback copy failed: ', err);
    alert('Failed to copy URL to clipboard. Please copy manually.');
  }

  document.body.removeChild(textArea);
}


// --- Example Usage (You would run this part in your script after the function definition) ---
const htmlContent = `
  <p>Check out these links:</p>
  <a href="https://www.example.com">Example Website</a>
  <a href="https://www.google.com">Google</a>
  <a href="mailto:test@example.com">Email Us</a>
  <a href="tel:+15551234567">Call Us</a>
  <a href="https://www.example.com/page with spaces">Link with Spaces</a>
  <a href="">Empty URL Link</a>
  <a>Link without href</a>
  <a href="https://www.another-example.org">Another Example</a>
  <a href="https://subdomain.example.com/path/to/resource">Subdomain Link</a>
`;

// Call the function to parse HTML and create the table
const urlTable = parseUrlsAndDisplayTable(htmlContent);

// Get the element where you want to display the table (e.g., a div with id="urlTableContainer")
const container = document.getElementById('urlTableContainer'); // Make sure you have this element in your HTML

if (container) {
  container.appendChild(urlTable); // Append the table to the container
} else {
  console.error("Container element with id 'urlTableContainer' not found in the HTML.");
  // You can append it to the body directly for testing if needed:
  // document.body.appendChild(urlTable);
}


/* ---  Basic CSS for the table (Optional - Add to your CSS file or <style> tag) --- */
/*
.url-table {
  border-collapse: collapse;
  width: 100%;
  margin-top: 20px;
}

.url-table th, .url-table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

.url-table th {
  background-color: #f2f2f2;
}

.url-table td button {
  padding: 5px 10px;
  cursor: pointer;
}
*/