@page "/devices"
@inject IDeviceService DeviceService
@using MudBlazor
@implements IDisposable

<PageTitle>Device Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <MudStack Spacing="3">
        <MudText Typo="Typo.h4" GutterBottom="true">Device Dashboard</MudText>

        <MudStack Direction="Row" Spacing="2" AlignItems="Center">
            <MudTextField @bind-Value="searchTerm" Placeholder="Search hostname or user" Variant="Variant.Outlined" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Refresh">Refresh</MudButton>
            <MudSelect T="int" Label="Auto-refresh" @bind-Value="refreshSeconds">
                <MudSelectItem Value="0">Off</MudSelectItem>
                <MudSelectItem Value="5">5s</MudSelectItem>
                <MudSelectItem Value="15">15s</MudSelectItem>
                <MudSelectItem Value="30">30s</MudSelectItem>
            </MudSelect>
        </MudStack>

        <MudTable Items="Filtered" Hover="true" Dense="true">
            <HeaderContent>
                <MudTh>Status</MudTh>
                <MudTh>Hostname</MudTh>
                <MudTh>Logged In User</MudTh>
                <MudTh>Drive(s)</MudTh>
                <MudTh>Software Versions</MudTh>
                <MudTh>Last Seen (UTC)</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Status">
                    @if (context.IsOnline)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Success" Size="Size.Small" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Error" Size="Size.Small" />
                    }
                </MudTd>
                <MudTd DataLabel="Hostname">@context.Hostname</MudTd>
                <MudTd DataLabel="Logged In User">@(string.IsNullOrEmpty(context.LoggedInUser) ? "â€”" : context.LoggedInUser)</MudTd>
                <MudTd DataLabel="Drive(s)">
                    @foreach (var disk in context.Disks)
                    {
                        <MudProgressLinear Value="disk.UsedPercent" Color="Color.Primary" Class="mb-1" />
                        <MudText Typo="Typo.caption">
                            @disk.MountPoint: @BytesToHuman(disk.UsedBytes) / @BytesToHuman(disk.TotalBytes)
                        </MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Software Versions">
                    @foreach (var kv in context.SoftwareVersions)
                    {
                        <MudChip Color="Color.Info" Variant="Variant.Outlined">@kv.Key: @kv.Value</MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Last Seen (UTC)">@context.LastSeenUtc.ToString("yyyy-MM-dd HH:mm:ss")</MudTd>
            </RowTemplate>
        </MudTable>
    </MudStack>
</MudContainer>

@code {
    private List<Device> devices = new();
    private System.Threading.Timer? _timer;
    private int refreshSeconds = 0;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private IEnumerable<Device> Filtered => devices
        .Where(d => string.IsNullOrWhiteSpace(searchTerm) ||
                    d.Hostname.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (d.LoggedInUser?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
        .OrderByDescending(d => d.IsOnline)
        .ThenBy(d => d.Hostname);

    private async Task LoadAsync()
    {
        devices = await DeviceService.GetAllAsync();
        StateHasChanged();
    }

    private async Task Refresh()
    {
        await DeviceService.RefreshAsync();
        await LoadAsync();
    }

    private string BytesToHuman(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }
        return $"{len:0.#}{sizes[order]}";
    }

    private void StartTimer()
    {
        _timer?.Dispose();
        if (refreshSeconds > 0)
        {
            _timer = new System.Threading.Timer(async _ => await Refresh(), null, refreshSeconds * 1000, refreshSeconds * 1000);
        }
    }

    private int refreshSecondsProp
    {
        get => refreshSeconds;
        set
        {
            refreshSeconds = value;
            StartTimer();
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
