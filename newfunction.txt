Models/Device.cs

csharp
Copy
Edit
using System;
using System.Collections.Generic;

public record DiskInfo(string MountPoint, long TotalBytes, long UsedBytes)
{
    public double UsedPercent => TotalBytes == 0 ? 0 : (double)UsedBytes / TotalBytes * 100.0;
}

public class Device
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Hostname { get; set; } = string.Empty;
    public bool IsOnline { get; set; }
    public string LoggedInUser { get; set; } = string.Empty;
    public List<DiskInfo> Disks { get; set; } = new();
    public Dictionary<string, string> SoftwareVersions { get; set; } = new();
    public DateTime LastSeenUtc { get; set; } = DateTime.UtcNow;
}
Services/IDeviceService.cs

csharp
Copy
Edit
using System.Collections.Generic;
using System.Threading.Tasks;

public interface IDeviceService
{
    Task<List<Device>> GetAllAsync();
    Task<Device?> GetByIdAsync(string id);
    Task RefreshAsync();
}
Services/DeviceService.cs (mock data generator)

csharp
Copy
Edit
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class DeviceService : IDeviceService
{
    private readonly List<Device> _devices;
    private readonly Random _rng = new();

    public DeviceService()
    {
        _devices = Enumerable.Range(1, 12).Select(i => new Device
        {
            Hostname = $"device-{i:00}",
            IsOnline = _rng.NextDouble() > 0.2,
            LoggedInUser = _rng.NextDouble() > 0.5 ? $"user{i}" : string.Empty,
            Disks = new List<DiskInfo>
            {
                new DiskInfo("C:", 500L * 1024 * 1024 * 1024, (long)(_rng.NextDouble() * 500L * 1024 * 1024 * 1024)),
                new DiskInfo("D:", 1000L * 1024 * 1024 * 1024, (long)(_rng.NextDouble() * 1000L * 1024 * 1024 * 1024))
            },
            SoftwareVersions = new Dictionary<string, string>
            {
                ["Agent"] = $"{_rng.Next(1,4)}.{_rng.Next(0,10)}.{_rng.Next(0,50)}",
                ["OS"] = _rng.NextDouble() > 0.3 ? "Windows 10" : "Windows 11"
            },
            LastSeenUtc = DateTime.UtcNow.AddSeconds(-_rng.Next(0, 600))
        }).ToList();
    }

    public Task<List<Device>> GetAllAsync() =>
        Task.FromResult(_devices.Select(Clone).ToList());

    public Task<Device?> GetByIdAsync(string id) =>
        Task.FromResult(_devices.FirstOrDefault(d => d.Id == id));

    public Task RefreshAsync()
    {
        foreach (var d in _devices)
        {
            // Randomly change status
            if (_rng.NextDouble() < 0.15)
            {
                d.IsOnline = !d.IsOnline;
                d.LastSeenUtc = DateTime.UtcNow;
            }

            // Randomly bump disk usage
            for (int i = 0; i < d.Disks.Count; i++)
            {
                var disk = d.Disks[i];
                long change = (long)(_rng.NextDouble() * 10 * 1024 * 1024 * 1024);
                long newUsed = Math.Min(disk.TotalBytes, disk.UsedBytes + change);
                d.Disks[i] = new DiskInfo(disk.MountPoint, disk.TotalBytes, newUsed);
            }
        }
        return Task.CompletedTask;
    }

    private Device Clone(Device d) => new()
    {
        Id = d.Id,
        Hostname = d.Hostname,
        IsOnline = d.IsOnline,
        LoggedInUser = d.LoggedInUser,
        Disks = d.Disks.Select(x => new DiskInfo(x.MountPoint, x.TotalBytes, x.UsedBytes)).ToList(),
        SoftwareVersions = new Dictionary<string, string>(d.SoftwareVersions),
        LastSeenUtc = d.LastSeenUtc
    };
}
Registration in Program.cs

csharp
Copy
Edit
builder.Services.AddSingleton<IDeviceService, DeviceService>();