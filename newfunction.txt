import os
import re
import string # Import string for punctuation handling

def read_software_list(filepath):
    """Reads a software list from a file, one item per line."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            software_list = [line.strip() for line in f if line.strip()]
        return software_list
    except FileNotFoundError:
        print(f"Error: File not found at {filepath}")
        return None
    except Exception as e:
        print(f"Error reading file {filepath}: {e}")
        return None

def normalize_name(name):
    """
    Normalizes software name: lowercase, strip whitespace, remove punctuation.
    """
    if not name:
        return ""
    # Remove punctuation (keeps letters, numbers, whitespace)
    translator = str.maketrans('', '', string.punctuation)
    name = name.translate(translator)
    # Lowercase and strip leading/trailing whitespace
    name = name.lower().strip()
    # Reduce multiple spaces to single spaces
    name = re.sub(r'\s+', ' ', name)
    return name

def compare_lists(my_software_list, db_software_list):
    """
    Compares the user's software list against the database list using
    partial matching allowing for a difference of at most one token.

    Returns a dictionary containing categorized results.
    """
    if my_software_list is None or db_software_list is None:
        return None

    db_normalized_map = {}
    for db_item in db_software_list:
        normalized = normalize_name(db_item)
        if normalized:
            if normalized not in db_normalized_map:
                db_normalized_map[normalized] = []
            db_normalized_map[normalized].append(db_item)

    results = {
        'software_in_database': [],
        'partial_matches': {},
        'software_not_in_database': []
    }

    processed_my_software_normalized = set()

    for my_sw_orig in my_software_list:
        my_sw_norm = normalize_name(my_sw_orig)

        if not my_sw_norm or my_sw_norm in processed_my_software_normalized:
            continue

        found_match_type = None
        # matching_db_entries = [] # Not needed directly here anymore

        # 1. Check for Exact Match (post-normalization)
        if my_sw_norm in db_normalized_map:
            found_match_type = 'exact'
            results['software_in_database'].append(my_sw_orig)
            processed_my_software_normalized.add(my_sw_norm)
            continue # Move to the next item in my list

        # 2. If no exact match, check for "All But One Token" Partial Match
        partial_found = False
        possible_partial_matches = []
        my_sw_tokens = set(my_sw_norm.split())
        my_sw_tokens.discard('') # Ensure no empty tokens

        if not my_sw_tokens: # Skip if normalization resulted in empty tokens
             processed_my_software_normalized.add(my_sw_norm)
             # Decide how to classify: Treat as 'not found' if it has no meaningful tokens
             results['software_not_in_database'].append(my_sw_orig)
             continue

        for db_norm, db_orig_list in db_normalized_map.items():
            db_tokens = set(db_norm.split())
            db_tokens.discard('')

            if not db_tokens:
                continue # Skip empty db entries

            # --- "All But One Token" Match Logic ---
            # Calculate tokens unique to 'my' software and unique to 'db' software
            my_unique_tokens = my_sw_tokens - db_tokens
            db_unique_tokens = db_tokens - my_sw_tokens

            # Calculate common tokens to ensure there's *some* overlap
            common_tokens = my_sw_tokens.intersection(db_tokens)

            # Condition:
            # 1. There must be at least one common token (prevents matching completely unrelated names)
            # 2. EITHER the number of tokens only in 'my' set is 0 or 1
            # 3. OR the number of tokens only in 'db' set is 0 or 1
            # This allows for one side to be a subset (len unique = 0) or differ by just one token.
            if len(common_tokens) > 0 and \
               (len(my_unique_tokens) <= 1 or len(db_unique_tokens) <= 1):
                partial_found = True
                possible_partial_matches.extend(db_orig_list)


        if partial_found:
            found_match_type = 'partial'
            # Use set to ensure unique DB entries for this partial match
            results['partial_matches'][my_sw_orig] = sorted(list(set(possible_partial_matches)))
        else:
            # 3. If no match of any kind found
            results['software_not_in_database'].append(my_sw_orig)

        processed_my_software_normalized.add(my_sw_norm)

    return results

def write_results(output_file, results):
    """Writes the categorized results to a file."""
    if results is None:
        print("Skipping writing results due to previous errors.")
        return

    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("=" * 30 + "\n")
            f.write("Software Comparison Results\n")
            f.write("=" * 30 + "\n\n")

            # --- Software Found Directly in Database ---
            f.write("=== Software Found Directly in Database (Exact Normalized Match) ===\n")
            if results['software_in_database']:
                for item in sorted(results['software_in_database']):
                    f.write(f"- {item}\n")
            else:
                f.write("None\n")
            f.write("\n")

            # --- Potential Partial Matches Found ---
            f.write("=== Potential Partial Matches Found (Difference <= 1 Token) ===\n")
            if results['partial_matches']:
                for my_sw, db_matches in sorted(results['partial_matches'].items()):
                    f.write(f"- Your Software: {my_sw}\n")
                    f.write(f"  Potential DB Matches: {', '.join(db_matches)}\n")
            else:
                f.write("None\n")
            f.write("\n")

            # --- Software Not Found in Database ---
            f.write("=== Software NOT Found in Database (Exact or Partial) ===\n")
            if results['software_not_in_database']:
                for item in sorted(results['software_not_in_database']):
                    f.write(f"- {item}\n")
            else:
                f.write("None\n")
            f.write("\n")

        print(f"Results successfully written to {output_file}")

    except Exception as e:
        print(f"Error writing results to file {output_file}: {e}")

# --- Main Execution ---
if __name__ == "__main__":
    my_software_file = "my_software.txt"
    db_software_file = "database_software.txt"
    output_result_file = "comparison_results.txt"

    print(f"Reading your software list from: {my_software_file}")
    my_list = read_software_list(my_software_file)

    print(f"Reading database software list from: {db_software_file}")
    db_list = read_software_list(db_software_file)

    if my_list is not None and db_list is not None:
        print("Comparing lists using 'all but one token' partial matching...")
        comparison_results = compare_lists(my_list, db_list)
        write_results(output_result_file, comparison_results)
    else:
        print("Comparison cancelled due to errors reading input files.")