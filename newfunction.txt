@page "/polling-component"
@implements IDisposable

<h3>Live Data Poller</h3>
<p>This component continuously polls for new data in the background.</p>

<p><strong>Status:</strong> @_message</p>

@code {
    private string _message = "Waiting for first poll...";

    // The "off switch" for our background task
    private CancellationTokenSource _cts = new CancellationTokenSource();

    protected override void OnInitialized()
    {
        // Fire-and-forget the long-running task.
        // The `_` discards the returned Task, signaling we don't need to await it.
        _ = DoContinuousWorkAsync();
    }

    private async Task DoContinuousWorkAsync()
    {
        while (!_cts.Token.IsCancellationRequested)
        {
            // Simulate fetching data from an external source
            var data = await GetCurrentDataPoint();

            // InvokeAsync is CRITICAL for safely updating the UI from a different thread
            await InvokeAsync(() =>
            {
                _message = $"Last check at {DateTime.Now:T}. Current value: {data}";
                StateHasChanged(); // Tell Blazor to update the display
            });

            try
            {
                // Wait for 5 seconds, but stop immediately if cancellation is requested
                await Task.Delay(TimeSpan.FromSeconds(5), _cts.Token);
            }
            catch (OperationCanceledException)
            {
                // This is the expected result when Dispose() is called.
                // The loop will exit cleanly.
                break;
            }
        }
    }

    // This is just a placeholder for a real API call
    private Task<int> GetCurrentDataPoint()
    {
        return Task.FromResult(new Random().Next(100));
    }

    // This method is called by the framework when the component is removed from the UI
    public void Dispose()
    {
        // Send the cancellation signal to the background task
        _cts.Cancel();
        _cts.Dispose();
    }
}