function findAllObjectsWithValueInReport(obj, targetValue) {
  const results = [];
  const targetTerms = targetValue.toLowerCase().split(/[\s\n]+/);

  // Function to search within the "report" node for target terms
  function searchInReport(reportObj) {
    const foundTerms = new Set(); // Keep track of terms found in THIS object and its children

    function findTermsRecursive(currentObj) {
      for (const key in currentObj) {
        if (currentObj.hasOwnProperty(key)) {
          const value = currentObj[key];

          if (typeof value === 'string') {
            const reportParts = value.toLowerCase().split(/[\s\n]+/);
            for (const part of reportParts) {
              if (targetTerms.includes(part) && !foundTerms.has(part)) {
                foundTerms.add(part); // Add the found term to the set
              }
            }
          } else if (typeof value === 'object' && value !== null) {
            findTermsRecursive(value); // Recursive call for nested objects
          }
        }
      }
    }

    findTermsRecursive(reportObj); // Start recursive search within the current report object

    // Check if ALL target terms were found within THIS object
    if (targetTerms.every(term => foundTerms.has(term))) {
      results.push(reportObj);
    }
  }

  //Iterates over root
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
         if(key === 'report' && typeof obj[key] === 'object' && obj[key] !== null){
            searchInReport(obj[key]);
         }
      }
    }

  return results;
}