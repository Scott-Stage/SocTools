using System;
using System.Text.RegularExpressions;

public static class WatchlistPatterns
{
    /// Case-insensitive "contains this exact literal substring".
    /// Example: "ca." -> (?i).*ca\..*
    public static string WrapContainsLiteral(string plain)
    {
        if (string.IsNullOrWhiteSpace(plain))
            throw new ArgumentException("Empty value", nameof(plain));

        var tok = Regex.Escape(plain.Trim());        // ensures '.' is literal
        return $"(?i).*{tok}.*";
    }

    /// Case-insensitive "equals this exact literal string".
    /// Example: "ftb.ca.gov" -> (?i)^ftb\.ca\.gov$
    public static string WrapEqualsLiteral(string plain)
    {
        if (string.IsNullOrWhiteSpace(plain))
            throw new ArgumentException("Empty value", nameof(plain));

        var tok = Regex.Escape(plain.Trim());
        return $"(?i)^{tok}$";
    }

    /// Optional: Try to unwrap only our contains shape back to the plain token.
    public static bool TryUnwrapContains(string pattern, out string plain)
    {
        plain = "";
        if (string.IsNullOrWhiteSpace(pattern)) return false;
        var m = Regex.Match(pattern.Trim(), @"^\(\?i\)\.\*(?<tok>.+)\.\*$");
        if (!m.Success) return false;
        plain = Regex.Unescape(m.Groups["tok"].Value);
        return true;
    }
}