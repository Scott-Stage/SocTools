@page "/list-delete"

<h3>List of Items</h3>

<button @onclick="AddItem">Add Item</button>

@if (items.Any())
{
    <ul>
        @foreach (var item in items)
        {
            <li @key="item.Id"> @* @key is highly recommended for list rendering efficiency *@
                <ItemDisplay Data="item" OnDeleteRequest="() => HandleItemDelete(item.Id)" />
            </li>
        }
    </ul>
}
else
{
    <p>No items to display.</p>
}


@code {
    private List<ItemModel> items = new List<ItemModel>();
    private int nextId = 1;

    protected override void OnInitialized()
    {
        // Add some initial items
        AddItem();
        AddItem();
    }

    private void AddItem()
    {
        items.Add(new ItemModel { Id = nextId, Name = $"Item {nextId}" });
        nextId++;
    }

    private void HandleItemDelete(int itemId)
    {
        var itemToRemove = items.FirstOrDefault(i => i.Id == itemId);
        if (itemToRemove != null)
        {
            items.Remove(itemToRemove);
            // StateHasChanged(); // Not strictly needed if OnDeleteRequest is from a child's @onclick
                                // but good practice if the list modification happens elsewhere.
        }
    }

    public class ItemModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}






ChildItem:

@implements IDisposable

<div style="border: 1px solid blue; padding: 5px; margin: 5px;">
    <span>ID: @Data.Id, Name: @Data.Name</span>
    <button @onclick="RequestDelete">Delete Me</button>
</div>

@code {
    [Parameter]
    public ListComponent.ItemModel Data { get; set; } = new(); // Initialize to avoid null issues

    [Parameter]
    public EventCallback OnDeleteRequest { get; set; }

    private async Task RequestDelete()
    {
        await OnDeleteRequest.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        Console.WriteLine($"ItemDisplay ({Data?.Id} - {this.GetHashCode()}) Initialized.");
    }

    public void Dispose()
    {
        Console.WriteLine($"ItemDisplay ({Data?.Id} - {this.GetHashCode()}) Disposed.");
    }
}