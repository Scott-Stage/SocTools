sealed class NoProxy : IWebProxy
{
    public ICredentials? Credentials { get; set; }
    public Uri GetProxy(Uri d) => d;
    public bool IsBypassed(Uri h) => true;
}

static async Task<string> DetectCanonicalPathAsync(string host, int port, CancellationToken ct)
{
    using var http = new HttpClient(new HttpClientHandler { AllowAutoRedirect = false });
    http.Timeout = TimeSpan.FromSeconds(5);

    foreach (var path in new[] { "/full-stream", "/full-stream/" })
    {
        try
        {
            var url = $"http://{host}:{port}{path}/example.json".Replace("//example.json", "/example.json");
            using var resp = await http.GetAsync(url, ct);
            if ((int)resp.StatusCode is >= 200 and < 300) return path;        // 200 OK
            if ((int)resp.StatusCode == 307 && resp.Headers.Location is { } loc)
                return loc.AbsolutePath.EndsWith("/") ? "/full-stream/" : "/full-stream";
        }
        catch { /* try next */ }
    }
    // Fallback to no slash
    return "/full-stream";
}

static async Task<ClientWebSocket> ConnectAsync(string host, int port, string path, CancellationToken ct)
{
    var ws = new ClientWebSocket();
    ws.Options.Proxy = new NoProxy();
    ws.Options.KeepAliveInterval = TimeSpan.FromSeconds(30);                 // send pings
    ws.Options.SetRequestHeader("Origin", $"http://{host}:{port}");          // server expects Origin
    var uri = new UriBuilder("ws", host, port, path).Uri;
    await ws.ConnectAsync(uri, ct);
    return ws;
}

static async Task ReceiveLoopAsync(ClientWebSocket ws, Regex filter, CancellationToken ct)
{
    var buffer = new byte[64 * 1024];
    while (!ct.IsCancellationRequested && ws.State == WebSocketState.Open)
    {
        using var ms = new MemoryStream();
        WebSocketReceiveResult res;
        do
        {
            res = await ws.ReceiveAsync(buffer, ct);
            if (res.MessageType == WebSocketMessageType.Close)
            {
                await ws.CloseAsync(WebSocketCloseStatus.NormalClosure, "bye", ct);
                return;
            }
            if (res.MessageType != WebSocketMessageType.Text) break;
            ms.Write(buffer, 0, res.Count);
        }
        while (!res.EndOfMessage);

        if (res.MessageType != WebSocketMessageType.Text) continue;

        ms.Position = 0;
        JsonDocument doc;
        try { doc = await JsonDocument.ParseAsync(ms, cancellationToken: ct); }
        catch (JsonException) { continue; }

        using (doc)
        {
            var root = doc.RootElement;
            if (!root.TryGetProperty("message_type", out var mt) ||
                mt.GetString() != "certificate_update") continue;

            if (!root.TryGetProperty("data", out var data) ||
                !data.TryGetProperty("leaf_cert", out var cert) ||
                !cert.TryGetProperty("all_domains", out var arr) ||
                arr.ValueKind != JsonValueKind.Array) continue;

            foreach (var d in arr.EnumerateArray()
                                 .Select(e => e.GetString())
                                 .Where(s => !string.IsNullOrWhiteSpace(s))!
                                 .Distinct(StringComparer.OrdinalIgnoreCase))
            {
                if (filter.IsMatch(d))
                    Console.WriteLine($"{DateTimeOffset.Now:u}  {d}");
            }
        }
    }
}

static async Task RunAsync(string host, int port, string[] patterns, CancellationToken ct)
{
    var rx = new Regex(string.Join("|", patterns.Select(Regex.Escape)),
                       RegexOptions.IgnoreCase | RegexOptions.Compiled);

    while (!ct.IsCancellationRequested)
    {
        try
        {
            var path = await DetectCanonicalPathAsync(host, port, ct);
            Console.WriteLine($"Using canonical path: {path}");
            using var ws = await ConnectAsync(host, port, path, ct);
            Console.WriteLine($"[{DateTimeOffset.Now:u}] Connected ws://{host}:{port}{path}");
            await ReceiveLoopAsync(ws, rx, ct);
            Console.WriteLine($"[{DateTimeOffset.Now:u}] Closed by server.");
        }
        catch (OperationCanceledException) { break; }
        catch (WebSocketException wse) { Console.WriteLine($"WS error: {wse.Message}"); }
        catch (Exception ex) { Console.WriteLine($"Error: {ex.Message}"); }

        // backoff before reconnect
        try { await Task.Delay(TimeSpan.FromSeconds(3), ct); } catch { break; }
    }
}

// ---- call it ----
/*
var cts = new CancellationTokenSource();
Console.CancelKeyPress += (_, e) => { e.Cancel = true; cts.Cancel(); };
await RunAsync("170.9.26.247", 8080, new[] { "yourbrand", "y0urbrand" }, cts.Token);
*/