using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

// Matches the JSON your endpoint returns:
// {"source":"file","pattern":"...","lines":["rule1","rule2", ...]}
public sealed class WatchlistState
{
    [JsonPropertyName("pattern")] public string? Pattern { get; init; }
    [JsonPropertyName("lines")]   public List<string>? Lines { get; init; }
    [JsonPropertyName("source")]  public string? Source { get; init; }
}

public static class WatchlistHelpers
{
    private static readonly JsonSerializerOptions JsonOpts = new(JsonSerializerDefaults.Web)
    {
        AllowTrailingCommas = true,
        ReadCommentHandling = JsonCommentHandling.Skip,
        WriteIndented = false
    };

    /// Convert a WatchlistState into a List<string>.
    /// Uses Lines when present; falls back to the single combined Pattern.
    public static List<string> ToRuleList(WatchlistState? state)
    {
        var list = new List<string>();
        if (state is null) return list;

        if (state.Lines is { Count: > 0 })
        {
            foreach (var s in state.Lines)
                if (!string.IsNullOrWhiteSpace(s))
                    list.Add(s.Trim());
        }
        else if (!string.IsNullOrWhiteSpace(state.Pattern))
        {
            list.Add(state.Pattern!.Trim());
        }

        return list;
    }

    /// Parse JSON text into a List<string>.
    public static List<string> ToRuleList(string json)
    {
        var state = JsonSerializer.Deserialize<WatchlistState>(json, JsonOpts);
        return ToRuleList(state);
    }

    /// Fetch /watchlist and return a List<string>.
    public static async Task<List<string>> GetRulesAsync(HttpClient http, CancellationToken ct = default)
    {
        using var resp = await http.GetAsync("watchlist", ct);
        resp.EnsureSuccessStatusCode();
        await using var s = await resp.Content.ReadAsStreamAsync(ct);
        var state = await JsonSerializer.DeserializeAsync<WatchlistState>(s, JsonOpts, ct);
        return ToRuleList(state);
    }

    /// Add rules from WatchlistState into an existing List<string> (optional de-dupe).
    public static void AddRules(List<string> destination, WatchlistState? state, bool dedupe = true)
    {
        if (destination is null) throw new ArgumentNullException(nameof(destination));
        var rules = ToRuleList(state);

        if (!dedupe) { destination.AddRange(rules); return; }

        var seen = new HashSet<string>(destination, StringComparer.Ordinal);
        foreach (var r in rules)
            if (seen.Add(r)) destination.Add(r);
    }
}
