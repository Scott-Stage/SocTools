@page "/file-reader"
@using System.IO
@using System.Text
@using System.Threading
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<h1>Real-time File Content Viewer</h1>

<!-- 1. Set this path to the directory containing your files -->
@code {
    private string directoryPath = @"C:\Your\Log\Directory"; 
    private string filePath { get; set; } = @"C:\Your\Log\Directory\service-a.log"; // 2. Set this to the file you want to auto-select and start with
}

<div>
    <label for="file-selector">Select File:</label>
    <select id="file-selector" class="form-control" @onchange="OnFileSelectionChanged">
        <option value="" disabled="@(availableFiles.Any())">-- Select a file --</option>
        @foreach (var file in availableFiles)
        {
            <!-- 3. Pre-select the option that matches the initial filePath -->
            <option value="@file" selected="@(file == filePath)">@Path.GetFileName(file)</option>
        }
    </select>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-warning mt-2" role="alert">
        @statusMessage
    </div>
}

<hr />

<h3>Content of: @(Path.GetFileName(filePath))</h3>

<div id="file-content-container" style="height: 800px; overflow-y: scroll; border: 1px solid #ccc; background-color: #f5f5f5;">
    <pre>@fileContent</pre>
</div>

@code {
    private List<string> availableFiles = new();
    private string? statusMessage;
    private string? fileContent;
    private Timer? timer;
    private bool shouldScrollToBottom = false;
    private IJSObjectReference? module;

    // 4. OnInitialized runs when the component is first created
    protected override void OnInitialized()
    {
        LoadAvailableFiles();
        // If the pre-selected file exists, start reading it immediately.
        if (availableFiles.Contains(filePath))
        {
            StartReading();
        }
    }

    private void LoadAvailableFiles()
    {
        try
        {
            if (Directory.Exists(directoryPath))
            {
                availableFiles = Directory.GetFiles(directoryPath).ToList();
                statusMessage = availableFiles.Any() ? null : "No files found in the directory.";
            }
            else
            {
                statusMessage = $"Error: Directory not found '{directoryPath}'. Please check the path in the component.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error reading directory: {ex.Message}";
        }
    }

    // 5. This method is triggered when a new item is selected in the dropdown
    private async Task OnFileSelectionChanged(ChangeEventArgs e)
    {
        var newFilePath = e.Value?.ToString();
        if (string.IsNullOrEmpty(newFilePath) || newFilePath == filePath)
        {
            return;
        }

        StopReading();
        filePath = newFilePath;
        fileContent = "Loading content..."; // Provide immediate feedback
        await InvokeAsync(StateHasChanged); // Update the UI to show the "Loading..." message

        StartReading();
    }

    private void StartReading()
    {
        timer?.Dispose();
        // Read immediately once, then start the timer for subsequent reads.
        timer = new Timer(async _ => await ReadFile(), null, 0, 1000);
    }

    private async Task ReadFile()
    {
        try
        {
            if (File.Exists(filePath))
            {
                using (var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                using (var streamReader = new StreamReader(fileStream, Encoding.UTF8))
                {
                    string newContent = await streamReader.ReadToEndAsync();
                    if (newContent != fileContent)
                    {
                        fileContent = newContent;
                        shouldScrollToBottom = true;
                    }
                }
            }
            else
            {
                fileContent = "File not found.";
            }
        }
        catch (Exception ex)
        {
            fileContent = $"Error reading file: {ex.Message}";
        }
        
        await InvokeAsync(StateHasChanged);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./FileContentReader.razor.js");
        }

        if (shouldScrollToBottom && module is not null)
        {
            await module.InvokeVoidAsync("scrollToBottom", "file-content-container");
            shouldScrollToBottom = false;
        }
    }

    private void StopReading()
    {
        timer?.Dispose();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
        timer?.Dispose();
    }
}